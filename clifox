#!/usr/bin/python
#main browser file (url fetcher, GUI wrapper, main window thread)
import json
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
import os,os.path,argparse
import utils
path=utils.path+"/modules"
sys.path.append(path)
import configParser
config=configParser.config
import gc,unidecode
import locale
locale.setlocale(locale.LC_ALL,"")
import inspect
import re,time,curses,curses.ascii,sys,Queue,utils,threading,traceback,string,hashlib,shelve,warnings,urlparse,binascii,urllib
import readline
import StringIO as stringio
import contentParser as cp
import guiMain
import mozCom
import guiObjects
#from guiObjects import *
from utils import log,generate_error_report

def makeCleanFunctionName(s):
 if "." not in s:
  return s
 else:
  parts=s.split(".")
  o=""
  o+=parts[0]
  for p in parts[1:]:
   o+=p[0].upper()+p[1:]
 return o

def log2(*args):
 logfh.write(",".join([str(i) for i in args]))
 logfh.write("\n")
 logfh.flush()

class ActiveWindow(guiMain.gui):
 """Manages the active window (the single set of screens available to the user for one webpage)
similar in concept to a tab in Firefox
"""
 def printStructure(self,x):
  output=""
  for i in x:
   if type(i)!=tuple and i.tagName!="#text":
    output+="<%s>\n" % (i.tagName,)
   elif type(i)!=tuple and i.tagName=="#text":
    output+=i.nodeValue.strip()+"\n"
   else:
    output+="</%s>\n" % (i[1].tagName,)
  return output

 @property
 def acc(self):
  return self.js.clifox.accNode(self.f)

 @property
 def f(self):
  return self.getFocusedElement()

 def exit(self,*a,**kw):
  try:
   curses.echo(1)
   self.screen.keypad(0)
   self.screen.nodelay(0)
   curses.nocbreak()
  except Exception,e:
   log("exit:err",e)
  sys.exit()

 quit=exit

 def __init__(self,screen,jsQ=None,jsRoot=None,start_url=""):
  """initialize the main window
jsQ points to the queue where JS generated events are sent
jsRoot points to the root class of js
"""
  log("thread:init:activeWindow")
  self.handlers=[self]
  self.statusbar=1
  self.lastMessage=""
  self.daemon=1
  self.start_url=start_url
  self.codeHist=[]
  self.events=[]
  global config
  self.config=config
  self.local_vars="numLines,_display,nodes,parser,screenNum,screenPos,screenPosX,url".split(",")
  self.jsQ=jsQ
  self.js=jsRoot
  self.keys=config.mainWindowKeys
  self.windows=[]
  self.windowVars={}
  self.windex=0
  self.screen = screen
  self.screen.nodelay(1)
  self.screen.keypad(1)
  curses.raw(1)
  curses.noecho()
  self.page=None
  self.initVars()
  self.run()

 def initVars(self):
  self.maxy,self.maxx=self.screen.getmaxyx()
  self.curPos=[0,0]
  self.status=self.maxy-1
  self.entry=self.status-1
  self.searchString=""
  self.maxy=self.entry-1
  self.screenPos=0
  self.screenPosX=0
  self.screenNum=0

 def downloadComplete(self,d):
  self.setStatus('The file "%s" has finished downloading.' % (d.get("filename","unavailable"),))

 def downloadStatus(self,d):
  if "progress" in d:
   p=d['progress']
   perc=(p[0]/p[1] if p[1]!=0 else 0.1)*100
   if str(perc).split(".",1)[0].endswith("0") and str(perc).split(".",1)[-1].startswith("00"):
    self.setStatus("%s, %s percent complete" % (str(perc),d['filename'],))

 def urlSuccess(self,d):
  self.setStatus("loaded,%s" % (d['url'],))
  self.url=d['url']
#  self.timer_q=Queue.Queue()
#  self.timer_events=[]
  if hasattr(self,"dom"):
   del self.dom

 def noNext(self, s):
   if config.beeps:
     curses.beep()
   if config.limitMessages:
     self.setStatus("No more %s" % s)

 def noPrev(self, s):
   if config.beeps:
     curses.beep()
   if config.limitMessages:
     self.updateStatus("No previous %s" % s)

 def gui(self,e):
  g=self.js.clifox.handler.s.clifox.gui
  d=g[0]
  e=d.elements
  elements=[]
  for i in e:
   oWriteable=0 if i[0]=="out" else 1
   type=i[1]
   params={}
   params["proxy"]="value"
   if type in ["text","title","password"]:
    oType=guiObjects.Readline
    params["prompt"]=i[2]
    params["text"]=i[3]
    if type=="password": params['echo']='*'
    if not oWriteable: params['readonly']=1
   elif type=="list":
    oType=guiObjects.Listbox
    params["items"]=i[2]
    params['value']=i[3]
   elif type=="checkbox":
    oType=guiObjects.Checkbox
    params['checked']=i[3]
    params['prompt']=i[2]
   elif type=="button":
    oType=guiObjects.Button
    params['prompt']=i[2]
   else:
    continue
   elements.append((oType,params))
  dlg=guiObjects.Dialog(screen=self.screen,base=self,y=0,x=0,controls=elements)
  self.handlers.append(dlg)

 def onStateChangeAll(self,e):
  self.events.append(e)

 def onStateChange(self,e):
  """Ignore the first onStateChange called on the about:blank document"""
#  old=self.dom.document.ref.id
#  self.dom.document.ref.jsrefresh()
#  if self.dom.document.ref.id!=old:
#   return
  self.events.append(e)
  self.dom.ref.jsrefresh()
  try:
   self.setStatus("event onStateChange: %s" % (self.dom.location.href))
  except Exception,err:
   generate_error_report(err)
#  self.page.linkedBrowser.ref.jsrefresh()
#  self.dom=self.page.linkedBrowser.contentDocument.defaultView
#  self.pageRefreshData()
  self.restoreWindow(self.page)
  if "youtube.com" in self.dom.location.host and ("youtube.com/embed/" in self.dom.location.href or "youtube.com/watch" in self.dom.location.href):
   try:
    h=self.dom.location.href
    if "/embed" in h and "autoplay" not in h:
     self.dom.location.href=h+("?" if "?" not in h else "&")+"autoplay=1"
     return
#    self.dom.wrappedJSObject.yt.player.getPlayerByElement("player").playVideo()
    b=self.dom.wrappedJSObject.document.body
    name="player-api" if "/embed" not in h else "player"
    x=b.insertBefore(self.dom.wrappedJSObject.document.createElement("div"),b.firstChild)
    x.innerHTML='<a onclick="javascript:yt.player.getPlayerByElement(\'%s\').playVideo();">play video</a>' % (name,)
    x.innerHTML+='<a onclick="javascript:yt.player.getPlayerByElement(\'%s\').stopVideo();">stop video</a>' % (name,)
    self.doPaint(1)
   except Exception,e:
    generate_error_report(e)

 def mutation(self,e):
  return
  self.setStatus("")
  self.setStatus(str(len(e)))

 def tabSelect(self,e):
  """firefox fires this event on tab switch"""
  log("tabSelect")
#   self.page.linkedBrowser.ref.jsrefresh()
  if self.page==e.target:
   return
  if self.page:
   del self.page
  self.page=e.target
  self.restoreWindow(self.page)
  self.windex=self.js.clifox.listAllTabs().indexOf(e.target)

 def load(self,e):
  """trigger on page loads. currently replaced with the onStateChange event to account for the goBack method's lack of triggering of the load event."""
  return
  self.page.linkedBrowser.ref.jsrefresh()
  if e.target.location.href=="about:blank":
   return
  log("page.linkedBrowser.contentDocument",self.page.linkedBrowser.contentDocument,"e.target",e.target)
  if e.target.defaultView==e.target.defaultView.top and self.page.linkedBrowser.contentDocument==e.target:
   self.events.append(e)
   self.dom=e.target.defaultView
   self.dom.ref.jsrefresh()
   log("setting dom to %s" % (str(self.dom),))
   self.setStatus("page %s loaded" % (self.dom.location.href,))
   self.pageRefreshData()

 def onStatusChange(self,e):
  """print status messages to status bar"""
  time.sleep(0.01)
  m=e.aMessage
  if self.lastMessage!=m:
   self.setStatus(m)
   self.lastMessage=m

 def event(self,e):
  """triggers on any event not covered above"""
  self.setStatus(str(e))

 def pageRefreshData(self):
  """create visual layout of webpage data and place that representation on screen
webpage has been received, processed, turned into a dom construct, and had it's load script method run.
now we display the webpage by scanning the nodes for text, and displaying that text layout to screen.
"""
  if argConfig.debug:
   try:
    self.setStatus("debugger enabled")
    utils.debugger(locals=locals())
    self.setStatus("debugger disabled")
   except:
    pass
  try:
   pass #utils.open("logs/loadedPageText.txt","wb").write(str(self.dom.document.body.parentNode.innerHTML))
  except Exception,e:
   generate_error_report()
  if self.dom==None:
   self.setStatus("waiting for dom...")
   return
  self.setStatus("painting")
  self.screen.clear()
  a=time.time()
  self.paintScreen()
  b=time.time()
  log("painted, time %s" % (str(b-a),))
  self.setStatus("showing screen")
  self.showScreen(absoluteY=0,force=1)
  self.htmlHttpCommands()

 def htmlHttpCommands(self):
  """might check for refresh or url-change requests here, though those should come through events"""
  return

 def toggleStatusBar(self,*l):
  """toggles status bar, limiting displayed text
toggles status bar (the bottom line of the window) to prevent text from changing the window state.
used, e.g. when reading a webpage as a whole document.
"""
  self.statusbar=0 if self.statusbar==1 else 1
 
 def nextLink(self,*args):
   x=self.moveToElem(self.findElement("A",direction="forward"))
   log("nextLink,%d,%d,%d" % (self.screenNum,self.screenPos,self.screenPosX,))

 def prevLink(self,*args):
  x=self.moveToElem(self.findElement("A",direction="backward"))
  log("prevLink,%d,%d,%d" % (self.screenNum,self.screenPos,self.screenPosX,))

 def jumpToLine(self,lineNumber):
  self.showScreen(absoluteY=lineNumber-1)

 def moveToElem(self,target):
#  log("target:",target)
  if target==None: return
  if type(target)!=tuple:
   target=self.getElementPosition(target)
  y,x,target=target
  self.showScreen(absoluteY=y,x=x)
  return target

 def wrapToFit(self, text, width=80, indent=None):
  log("wrapToFit:",text,width,indent)
  start,end=0,0
  lines=[]
  textLength=len(text)
  if indent!=None:
   end=width-indent
  else:
   end=width
  while end<textLength:
   if text[end]==' ':
    lines.append(text[start:end])
    start=end+1
    end=start+width
   if end==start:
    lines.append(text[start:start+width])
    start=start+width
    end=start+width
   end-=1
  lines.append(text[start:])
  return lines
 
 def forceCachelessPageRefresh(self):
  """send request to refresh the page and bypass the firefox cache"""
  if hasattr(self,"url"):
   self.dom.location.href=url
  else:
   self.setStatus("No page open.")

 def openLocalFile(self):
  fn=self.gFileBrowser()
  self.dom.location.href=fn

 def closePage(self):
  doExit=False
  if self.js.clifox.listAllTabs().length==1:
#if closing last tab, browser will close
   doExit=True
  try:
#   self.page.ownerDocument.defaultView.gBrowser.removeCurrentTab()
   self.js.clifox.closeTab(self.page)
   if doExit:
    self.exit()
  except Exception,e:
   log("error closing tab:"+str(e))

 def navigate(self,c=""):
  go=self.prompt(prompt="url",y=self.entry, history=None)
  if go=='': return
  self.page.linkedBrowser.loadURI(go)

 def navigateInNewWindow(self,url=None):
  if url==None:
   url=self.prompt(prompt="url (new window)",y=self.entry, history=None)
  self.newWindow(url)

 def goBack(self):
  if not self.page.linkedBrowser.canGoBack:
   return self.setStatus("no page to go back to in this tab")
  return self.page.linkedBrowser.goBack()
#  self.dom.defaultView.history.back()

 def urlError(self,d):
  url=d['url']
  err=d['error']
  fErr=repr(err)
  self.updateStatus("Error occured,%s,%s" % (err,url,))
  if "ssl" in fErr.lower():
   if url.split("//",1)[-1].split("/",1)[0] in self.noverify:
    self.pageQ.put(dict(name="go",url=url,verify=False))
    return
   fErrPlain=fErr.strip("(").strip(")").replace("(",".").replace(")",".").replace("..",".")
   ret=self.gListbox(base=self,screen=self.screen,items=["continue and save","cancel","continue"],title="Ignore SSL Certificate Verification security warning?",status=fErr)
   if "continue" in ret[-1]:
    self.pageQ.put(dict(name="go",url=url,verify=False))
   self.noverify.append(url.split("//",1)[1].split("/",1)[0])
   self.updateStatus("")

 def isInElement(self,e,n=None):
  if e in self.parentNodeNames(self.getFocusedElement()): return 1

 def findNextText(self,mx=-1):
  return self.findElement("#text",direction="forward")

 def findPrevText(self,mx=-1):
  return self.findElement("#text",direction="backward")

 def nums(self):
  cls=Listbox(screen=self.screen,base=self,y=1,values=zip(range(20),range(101,120)))
  while not cls.done:
   c=self.screen.getch()
   handled=cls.handleKey(c)

 def prompt(self,prompt="",y=None, x=None, history=None,default="", maxLength=2048,echo=None):
  if y==None:
   y=self.entry
#change to this once we have separation between form fields and their contents for rendering
#   y=self.screen.getyx()[0]
  pos=self.screen.getyx()
  cls=guiObjects.Readline(screen=self.screen,prompt=prompt,base=self,y=y,x=0,history=history,default=default,maxLength=maxLength,echo=echo)
  while not cls.done:
   c=self.screen.getch()
   handled=cls.handleKey(c)
  self.screen.move(pos[0],pos[1])
  return "".join(cls.currentLine)

 def onFocus(self,*args):
  d=self.getFocusedElement()
  if d==None:
   return None
  if argConfig.debug:
   log("onFocus: d="+d.nodeName+" type="+str(d.type)+" name="+str(d.name)+" value="+str(d.value)+" checked="+str(d.checked)+"\n innerHTML="+str(d.innerHTML)+" url="+str(d.url)+" src="+str(d.src)+" alt="+str(d.alt)+", pnns="+str(self.parentNodeNames(d)))
  if d.nodeName=="A":
   p=d
  elif d.nodeName in ("IFRAME","FRAME"):
   p=d
  elif "A" in self.parentNodeNames(d):
   p=d.parentNode
   while p.nodeName!="A": p=p.parentNode
  elif d.nodeName=="IMG":
   return self.setStatus("image %s" % d.src)
  elif d.nodeName=="TEXTAREA":
   return self.setStatus("textArea input, name %s" % d.name)
  elif d.nodeName=="SELECT":
   return self.setStatus("select list field")
  elif d.nodeName=="INPUT":
   if d.type=="checkbox":
    ret="checkbox,checked" if d.checked==True else "checkbox, not checked"
    return self.setStatus(ret)
   elif d.type=="radio":
    ret="radio button, checked" if d.checked==True else "radio button, not checked"
    return self.setStatus("%s %s" % (ret,str(d.name)))
   elif [d.type in ("TEXT","PASSWORD")]:
    return self.setStatus("%s input, name %s" % (str(d.type),str(d.name)))
  else:
   return self.setStatus("")
  if p.href!=None:
   url=p.href
  elif p.src:
   url=p.src
  else:
   url=None
  if url!=None:
   self.setStatus(url)
  else:
   self.setStatus("")

 def addToDownloads(self,url=None):
  return self.setStatus("downloading is not currently available")

 def execute(self):
  self.setStatus("clicked")
  d=self.getFocusedElement()
#  log("execute:focus:d=",d.nodeName)
  if "A" in self.parentNodeNames(d):
   while d.nodeName!="A":
    log("execute:currentNode:",d.nodeName)
    d=d.parentNode
  log("execute:currentNode:",d.nodeName)
#  open("/tmp/logfile.txt","wb").write("".join([str(j)+":"+str(self.f[j])+chr(10) for j in dir(self.f)]))
  if (d.nodeName=="INPUT" and str(d.type).lower() in ("button","reset","submit","image")) or (d.nodeName=="BUTTON"):
   return self.doClick(d)
  if self.formElements.intersection(self.parentNodeNames(d)):
   while d!=None and d.nodeName in self.formElements:
    d=d.parentNode
  if d.nodeName in self.formElements:
   try:
    return self.handleFormInput(d)
   except Exception,e:
    return generate_error_report()
  if d.nodeName=="A" and "#" in d.href and d.href.split("#",1)[0]==d.ownerDocument.location.href.split("#",1)[0]:
   anc=d.href.split("#",1)[-1]
   if anc:
    log("looking for anchor",anc)
    x=self.dom.document.getElementById(anc)
    if x!=None:
     return self.moveToElem(x)
  if d.nodeName=="A":
   url=d.href
   log("execute: "+url)
   return self.doClick(d)
#   self.dom.location.href=url
#   return
  if d.nodeName=="IFRAME" or d.nodeName=="FRAME":
   self.dom.location.href=d.src
   return
  return self.doClick(d)

 def doClick(self,e,method="click"):
  evt=self.dom.document.createEvent("MouseEvents")
  evt.initMouseEvent(method, True, True, self.dom, 0, 0, 0, 0, 0, False, False, False, False, 0, None)
  self.js.clifox.async(e,e.dispatchEvent,evt)
#  return 0 if e.dispatchEvent(evt) else 1

 def handleFormInput(self,element):
  sn,y,x=self.screenNum,self.screenPos,self.screenPosX
  log("handleFormInput",element.name)
  e=element
  baseForm=e.form
#parentNodes(name="form",count=1)
  while e!=None and e.nodeName not in self.formElements:
   e=e.parentNode
  log("e=%s" % (dir(e),))
  log("form: %s, formAction: %s, formEnctype: %s, formMethod: %s, FormNoValidate: %s" % (e.form,e.formAction,e.formEnctype,e.formMethod,e.formNoValidate))
  log("name:",e.name," title:",e.title," type:",e.type," nodeName:",e.nodeName," nodeType:",e.nodeType," nodeValue:",e.nodeValue," text:",e.text," textContent:",e.textContent," checked:",e.checked," default checked:",e.defaultChecked," hidden:",e.hidden," OPTIONS:",e.OPTIONS," options:",e.options," size:",e.size," length:",e.length," maxLength:",e.maxLength," tagName:",e.tagName," select:",e.select," selectedOptions:",e.selectedOptions," value:",e.value," defaultValue:",e.defaultValue)
  if e.nodeName=="OPTION":
#   self.setStatus("HFI:option found")
   e=self.parentNodes(e,name="select",count=1)
  if e.nodeName=="SELECT":
#   self.setStatus("HFI:select")
   opts=e.options
   if e.multiple:
    default=[idx for idx,t in enumerate(opts) if t.selected]
   else:
    default=e.selectedIndex
#getElementsByTagName("option")
   opts=[(i,i.textContent.strip()) for i in opts]
#   log("e.options: length %d, selectedIndex %s, e.value=%s" % (e.options.length,e.options.selectedIndex,e.value))
   ret=self.gListbox(base=self,screen=self.screen, title=e.name, items=opts, default=default,multiple=e.multiple)
   if e.multiple:
    [setattr(opts[i][0],"selected",True if i in ret else False) for i in xrange(len(opts))]
   else:
    opts[ret][0].selected=True
#   e.value=ret
#   log("listbox returned %s" % (ret,))
  elif e.nodeName=="INPUT" and e.type=="password":
   ret=self.prompt(default=e.value,maxLength=e.maxLength,echo="*")
   e.value=ret
  elif e.nodeName=="INPUT" and e.type=="text":
   ret=self.prompt(default=e.value,maxLength=e.maxLength)
   e.value=ret
  elif e.nodeName=="TEXTAREA":
   ret=self.gEditbox(screen=self.screen,base=self,y=0,x=0,default=e.value)
   e.value=ret
  elif e.nodeName=="INPUT" and e.type=="radio":
#   self.setStatus("HFI:radio button")
   opts=[i for i in self.getElementsByTagName(baseForm,"input") if i.type=="radio" and i.name==e.name]
   checked=[i for i in opts if i.checked]
   checkedIndex=opts.index(checked[0]) if checked else 0
#   log("radio opts=%s" % (opts,))
#   checked=[i for i in opts if i.checked==1]
#   checked=0 if len(checked)==0 else opts.index(checked[0])
   listOpts=[(i,i.value.strip()) for i in opts]
   ret=self.gListbox(screen=self.screen, base=self, title=e.name, items=listOpts, default=checkedIndex)
   opts[ret].checked=True
#   log("radio:ret:",ret)
  elif e.nodeName=="INPUT" and e.type=="checkbox":
#   self.setStatus("HFI:checkbox")
   ret=False if e.checked==True else True
#   e.checked=ret
   self.doClick(e)
  else:
   ret=self.prompt(default=e.value)
   e.value=ret
  self.paintScreen()
  self.showScreen(screenNum=sn,y=y,x=x,force=1)

 def onPositionChange(self):
  self.onFocus()
#  log(str(("screenNum",self.screenNum,"screenPos",self.screenPos,"screenPosX",self.screenPosX)))

 def nextLine(self,*args):
  self._nextLine()
  self.onPositionChange()

 def nextChar(self,*args):
  self._nextChar()
  self.onPositionChange()

 def prevChar(self,*args):
  self._prevChar()
  self.onPositionChange()

 def prevLine(self,*args):
  self._prevLine()
  self.onPositionChange()

 def _nextChar(self,*args):
  self.screenPosX+=1
#~~
  if self.screenPosX>=self.maxx or self.screenPosX>len(self.screen.instr(self.screenPos,0,self.maxx).strip()):
   self.screenPosX=0
   self.nextLine()
  else:
   self.screen.move(self.screenPos,self.screenPosX)

 def _prevChar(self,*args):
  self.screenPosX-=1
  log("sX="+str(self.screenPosX))
  if self.screenPosX<0:
   if self.screenPos==0:
    self.noPrev("characters")
    self.screenPosX+=1
    return
# or self.screenPosX>len(self.screen.instr(self.screenPos,0,self.maxx).strip()):
   log("sX<0,sX="+str(self.screenPosX))
   self.screenPosX=self.maxx-1
   log("sXNowEquals"+str(self.screenPosX))
   self.prevLine()
   log("sXWithPrevLine,sX="+str(self.screenPosX))
   curLineText=self.screen.instr(self.screenPos,0,self.maxx).strip()
   if self.screenPosX>len(curLineText):
    log("sX@%d,lenOfText@%d" % (self.screenPosX,len(curLineText),))
    self.screenPosX=len(curLineText)
    #remember to move to end of current string, since we're moving toend of current line text
  self.screen.move(self.screenPos,self.screenPosX)

 def _nextLine(self,*args):
  log("_nextLine",self.screenPos,self.screenPosX)
  self.screenPos+=1
  if self.screenPos>self.maxy and self.screenPos*self.screenNum<self.numLines:
   log("end of screen, moving to next screen.")
   self.screenPos=0
   self.nextScreen()
   log("screen,line",self.screenNum,self.screenPos)
  elif self.getScreenAbsolutePosition(y=self.screenPos)>self.numLines:
#self.getFocusedElement(y=self.screenPos-1)._display[-1][0]:
#>=self.numLines:
#self.iterNodes(self.dom.document)[-1]._display[-1][:2]==self.getScreenAbsolutePosition(self.screenNum,self.screenPos):
   log("At or past end of document.\nscreen,line,",self.screenNum,self.screenPos)
   self.screenPos-=1
   self.setStatus("EndOfPage,%d,%d,$url" % (self.screenNum,self.screenPos,))
  else:
   log("moving cursor from %d to %d, on screen %d." % (self.screenPos-1,self.screenPos,self.screenNum,))
   self.screen.move(self.screenPos,self.screenPosX)
  self.screen.refresh()

 def _prevLine(self,*args):
  log("_PrevLine",self.screenNum,self.screenPos,self.screenPosX)
  self.screenPos-=1
  if self.screenPos<0 and self.screenNum>0:
   self.screenPos=self.maxy
   self.prevScreen()
  elif self.screenNum==0 and self.screenPos<0:
   self.screenPos=0
   self.setStatus("StartOfPage,%d,%d,$url" % (self.screenNum,self.screenPos,))
   self.screen.move(self.screenPos,self.screenPosX)
   self.noPrev('lines')
  elif self.screenPos>=0:
   self.screen.move(self.screenPos,self.screenPosX)

 def nextScreen(self,*args):
  log("_nextScreen",self.screenNum,self.screenPos,self.screenPosX)
  self.screenNum+=1
  if (self.maxy+1)*self.screenNum<self.numLines:
    self.screenPos=0
    self.screenPosX=0
    self.screen.move(self.screenPos,self.screenPosX)
    self.showScreen(force=1)
    self.screen.refresh()
    log("nextScreen",self.screenNum,self.screenPos)
  else:
   log("nextScreen At  end of page.",self.screenNum,self.screenPos)
   self.screenNum-=1
   self.noNext('screens')
  self.pagePosition()

 def prevScreen(self,*args):
   if self.screenNum==0:
     log("prevScreen at first screen of page",self.screenNum,self.screenPos)
     self.noPrev('screens')
   else:
     self.screenNum-=1
     self.screenPos=self.maxy
     self.showScreen(force=1)
     self.screen.move(self.screenPos,self.screenPosX)
     self.screen.refresh()
     log("prevScreen",self.screenNum,self.screenPos)

 def topOfScreen(self):
  self.screenPos=0
  self.screenPosX=0
  self.screen.move(self.screenPos,self.screenPosX)

 def bottomOfScreen(self):
  self.screenPosX=0
  if self.maxy*(self.screenNum+1)<self.numLines:
    self.screenPos=self.maxy
    self.screen.move(self.screenPos,0)
  else:
    self.screenPos=self.numLines-self.maxy*self.screenNum-1
    self.screen.move(self.screenPos,0)
  log("BottomOfScreen",self.screenPos,self.screenNum)

 def topOfPage(self):
  if self.screenNum!=0:
    self.screenNum=0
    self.screenPos=0
    self.screenPosX=0
    self.showScreen(force=1)
  self.topOfScreen()
  log("topOfPage",self.screenPos,self.screenNum)

 def bottomOfPage(self):
   if self.numLines<self.maxy:
     self.bottomOfScreen()
   else:
     self.screenNum=self.numLines/self.maxy
     self.showScreen(force=1)
     self.bottomOfScreen()
     log("bottomOfPage",self.screenPos,self.screenNum)

 def startOfLine(self):
   self.screenPosX=0
   self.screen.move(self.screenPos,self.screenPosX)
   log("startOfLine",self.screenPos,self.screenPosX)

 def endOfLine(self):
  self.screenPosX=len(self.screen.instr(self.screenPos,0,self.maxx).strip())-1
  log("endOfLine","screen pos:",self.screenPos,"screen pos X:",self.screenPosX,"screen num:",self.screenNum)
  self.screen.move(self.screenPos,self.screenPosX)

 def pagePosition(self):
  try:
   self.screen.move(self.entry,0)
   self.screen.clrtoeol()
   if config.pagePosition=='pages':
     self.screen.addstr("Page %s of %s" % (self.screenNum+1,self.numLines/self.maxy+1))
   elif config.pagePosition=='percentage':
     self.screen.addstr("%d%% of %d lines." % (((self.screenNum+1)*self.maxy*100)/self.numLines,self.numLines))
   self.screen.move(self.screenPos,self.screenPosX)
   log("pagePosition",config.pagePosition)
   self.screen.refresh()
  except:
   self.setStatus("Page position error")

 def updateStatus(self,*args,**kw):
  self.setStatus(*args,**kw)

 def setStatus(self,txt,*l):
  if not self.statusbar: return
  if isinstance(txt,list): txt=",".join([str(i).strip() for i in txt])
  if l: txt+=" "+" ".join(l)
  if not isinstance(txt,str): txt=str(txt)
  txt=txt.encode('utf-8')
  log("status:",txt)
  cur=self.screen.getyx()
  self.screen.move(self.status,0)
  self.screen.clrtoeol()
  s=txt[:self.maxx-1]
#  log("statusInfo:",self.status,"sText",s,"pos",cur)
  try:
   self.screen.addstr(self.status,0,s)
  except:
   generate_error_report()
   self.setStatus("error")
  self.screen.move(cur[0],cur[1])
  self.screen.refresh()

 def saveWindow(self):
  if self.page:
   p=self.page
   self.windowVars[p]={}
   d=self.windowVars[p]
   [d.__setitem__(i,getattr(self,i,None)) for i in self.local_vars]

 def restoreWindow(self,w=None):
  self.page=w
  self.page.ref.jsrefresh()
  self.page.linkedBrowser.ref.jsrefresh()
  self.dom=self.page.linkedBrowser.contentDocument.defaultView
  self.dom.ref.jsrefresh()
  try:
   d=self.dom.document
  except:
   self.setStatus("No document object to display")
   return
  force=0
  if w in self.windowVars:
   [setattr(self,k,v) for k,v in self.windowVars[w].items() if k in self.local_vars]
  else:
   self.initVars()
  force=1
  self.doPaint(force)

 def doPaint(self,paint=0):
  a=time.time()
  if paint:
   try:
    self.paintScreen()
   except Exception,e:
    self.setStatus(e)
  else:
   log("painted from cache")
  b=time.time()
  log("painted, time %s." % (str(b-a),))
  self.showScreen(force=1)

 def execCode(self):
  p=self.prompt(prompt="code",history=self.codeHist)
  try:
   if ":"==p[0]:
    a=self.js.ref.eval(p[1:])
   else:
    if "=" in p and not [i for i in p.split("=",1)[0] if i not in string.digits+string.letters+"_."]:
     exec p
     a=eval("str("+p.split("=",1)[0].strip()+")")
    else:
     a=eval(p)
   self.setStatus(str(a).split("\n",1)[0])
  except Exception,e:
   self.setStatus("Exc:"+str(e))
   generate_error_report()

 def newWindow(self,url="about:blank"):
  p=self.js.clifox.addTab(url,self.page)
#  p.url=url
  self.js.clifox.selectTab(p)
#  self.moveWindow(id=self.js.Array.indexOf(self.js.gBrowser.tabs,p))

 def nextWindow(self):
  self.moveWindow(1)

 def prevWindow(self):
  self.moveWindow(-1)

 def moveWindow(self,direction=1,id=None):
#~~
  log("moveWindow","direction",direction,"id",id)
  self.saveWindow()
  _id=id
  id=self.windex
  lt=self.js.clifox.listAllTabs
#  log("lt",lt['$clifox'])
  tabs=lt()
#  log("tabs",tabs['$clifox'])
  tl=tabs.length-1
  if direction and _id==None:
   if direction>0:
    id=id+1 if id<tl else 0
   if direction<0:
    id=id-1 if id>0 else tl
  if _id!=None:
   id=_id
  self.windex=id
  log("id:",id)
  p=tabs[id]
  log("tab",p['$clifox'])
  self.js.clifox.selectTab(p)
#self.js.gBrowser.selectedTab=p
#  log("keys",self.js.Object.keys(self.js.clifox.map).toString())
#  log("selectedTab",id,"set",str(p.linkedBrowser.contentDocument.location.href))

 def handleKey(self,k,*args):
  if k in self.keys:
   try:
    exec(self.keys[k])
    return 1
   except Exception,e:
    fp = stringio.StringIO()
    traceback.print_exc(file=fp)
    message = fp.getvalue()
    del fp
    v=str(e)+"\n"+str(message)
    log("KBDError",v)
#~~
    self.setStatus("KeyboardError:%s" % (e,))
  return None

 def handleEvent(self,ev):
  self.events.append(ev)
#  log("mainWindow:event:",str(ev))
  try:
   n=ev['t']
   n=n[0].lower()+n[1:]
   m=getattr(self,n)
   try:
    return m(*ev['a'])
   except Exception,e:
    log("eventError:",e)
    generate_error_report()
  except:
   try:
    return self.event(ev)
   except Exception,e:
    generate_error_report()

 def event(self,e):
  self.events.append(e)
  if e.get("m","")=='w': return
#  self.setStatus("event %s" % (e.get("t","noName"),))

 def key(self,k):
  self.setStatus("key %s invalid." % (str(k),))

 def run(self):
  if not getattr(self,"page",None):
   self.page=self.js.clifox.getActiveTab()
   log("page",self.page.toString())
   if getattr(self,"start_url","")!=None:
    self.newWindow(getattr(self,"start_url",config.get("homepage","http://bmcginty.hopto.org/form.html")))
   else:
    wid=self.js.clifox.listAllTabs().indexOf(self.page)
#~~
    self.moveWindow(id=wid if wid > -1 else 0)
    self.restoreWindow(self.page)
  while 1:
   time.sleep(0.01)
   self.js.ref.recv(0.01)
   c=self.screen.getch()
   if c!=-1:
    for handler in self.handlers[::-1]:
     if handler.handleKey(c):
      break
   try:
    event=self.jsQ.get(block=0)
   except Queue.Empty:
    event=None
   if event!=None:
    self.handleEvent(event)
    continue

def parseArgs():
 parser=argparse.ArgumentParser()
 parser.add_argument("-H","--hostname",action="store",dest="hostname",help="address or name of host where firefox and the clifox extension are running",default="localhost")
 parser.add_argument("--debug",action="store_true",dest="debug",help="run python debugger when a page loads")
 parser.add_argument("homepage",action="store",nargs="?",help="homepage url")
# parser.add_argument("--profile",action="store_true",dest="profile",help="enable profiler")
 config=parser.parse_args()
 return config

def main2():
 global quitFlag,argConfig
 quitFlag=0
 config=parseArgs()
 argConfig=config
 if config.debug:
  utils.log("debugging noted, port will open on 7777 when page loads")
# import profile
 warnings.simplefilter("ignore")
 j,q=mozCom.initCliFox(hostname=config.hostname)
 curses.wrapper(ActiveWindow,jsQ=q,jsRoot=j,start_url=config.homepage)

if __name__=='__main__':
 main2()
